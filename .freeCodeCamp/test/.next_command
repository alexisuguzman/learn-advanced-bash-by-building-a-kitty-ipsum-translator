builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
builtin printf "\e]633;P;ContinuationPrompt=$(echo "$PS2" | sed 's/\x1b/\\\\x1b/g')\a"
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
builtin printf "\e]633;P;ContinuationPrompt=$(echo "$PS2" | sed 's/\x1b/\\\\x1b/g')\a"
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
echo hello bash > stdout.txt
echo hello bash >> stdout.txt
echo hello bash > stdout.txt
> stdout.txt
bad_command
bad_command > stderr.txt
stderr > stderr.txt
stderr 2> stderr.txt
bad_command 2> stderr.txt
echo hello bash > stdout.txt
read NAME
echo NAME
echo $NAME
echo $NAME > stdout.txt
echo freeCodeCamp > name.txt
read NAME > name.txt
read NAME < name.txt
echo $NAME
echo Alexis
echo %NAME
echo $NAME
cat
cat name.txt
cat < name.txt
echo Alexis
touch script.sh
chmod +x script.sh
./script.sh
./script.sh
echo waza
echo waza
echo waza
./script.sh < name.txt
./script.sh < name.txt 2> stderr.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
builtin printf "\e]633;P;ContinuationPrompt=$(echo "$PS2" | sed 's/\x1b/\\\\x1b/g')\a"
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
builtin printf "\e]633;P;ContinuationPrompt=$(echo "$PS2" | sed 's/\x1b/\\\\x1b/g')\a"
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./script.sh < name.txt 2> stderr.txt > stdout.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
./script.sh < name.txt 2> stderr.txt > stdout.txt
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
builtin printf "\e]633;P;ContinuationPrompt=$(echo "$PS2" | sed 's/\x1b/\\\\x1b/g')\a"
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./script.sh < name.txt 2> stderr.txt > stdout.txt
cat kitty_ipsum_1.txt
cat kitty_ipsum_2.txt
wc kitty_ipsum_1.txt
man wc
wc kitty_ipsum_1.txt -l
wc kitty_ipsum_1.txt -w
wc kitty_ipsum_1.txt -c
man wc
wc kitty_ipsum_1.txt -m
wc kitty_ipsum_1.txt
cat kitty_ipsum_1.txt
wc kitty_ipsum_1.txt < cat
wc < kitty_ipsum_1.txt
echo "~~ kitty_ipsum_1.txt info ~~" > kitty_info.txt
echo -e "\nNumber of lines:" >> kitty_info.txt
cat kitty_ipsum_1.txt
echo -e "\nNumber of lines:" >> kitty_info.txt
echo -e "\nNumber of words:" >> kitty_info.txt
cat kitty_ipsum_1.txt
echo -e "\nNumber of characters:" >> kitty_info.txt
cat kitty_ipsum_1.txt
wc -m < kitty_ipsum_1.txt >> kitty_info.txt
grep 'meow' kitty_ipsum_1.txt
man grep
grep 'meow' kitty_ipsum_1.txt --color
grep 'meow' kitty_ipsum_1.txt --color -l
man grep
grep 'meow' kitty_ipsum_1.txt --color -n
grep meow[a-z]* kitty_ipsum_1.txt --color -n
echo -e "\nNumber of times meow or meowzer appears:" >> kitty_info.txt
grep meow[a-z]* kitty_ipsum_1.txt --color
grep meow[a-z]* kitty_ipsum_1.txt --c
grep meow[a-z]* kitty_ipsum_1.txt -c
man grep
grep meow[a-z]* kitty_ipsum_1.txt -o
grep meow[a-z]* kitty_ipsum_1.txt -o
grep meow[a-z]* kitty_ipsum_1.txt -o
echo -e "\nNumber of times meow or meowzer appears:" >> kitty_info.txt
echo -e "\nLines that they appear on:" >> kitty_info.txt
grep meow[a-z]* kitty_ipsum_1.txt -n
man grep
cat name.txt
sed 's/r/2' name.txt
sed 's/r/2/' name.txt
sed 's/free/f233/' name.txt
sed 's/freecodecamp/f233C0d3C@mp/' name.txt
sed 's/freecodecamp/f233C0d3C@mp/i' name.txt
sed 's/freecodecamp/f233C0d3C@mp/i' < name.txt
cat name.txt
grep meow[a-z]* kitty_ipsum_1.txt
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
man sed
man sed
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grep meow[a-z]* kitty_ipsum_1.txt -n
grepcat[a-z]** kitty_ipsum_1.txt --color
grepcat[a-z]* kitty_ipsum_1.txt --color
__vsc_prompt_cmd_original
grep cat[a-z]* kitty_ipsum_1.txt --color
echo -e "\nNumber of times cat, cats or catnip appears:" >> kitty_info.txt
echo -e "\nNumber of times cat, cats, or catnip appears:" >> kitty_info.txt
grep cat[a-z]* kitty_ipsum_1.txt --n
grep cat[a-z]* kitty_ipsum_1.txt -o
grep cat[a-z]* kitty_ipsum_1.txt -o
grep cat[a-z]* kitty_ipsum_1.txt -o
echo -e "\nLines that they appear on:" >> kitty_info.txt
grep cat[a-z]* kitty_ipsum_1.txt -n
grep cat[a-z]* kitty_ipsum_1.txt -n
grep cat[a-z]* kitty_ipsum_1.txt -n
grep cat[a-z]* kitty_ipsum_1.txt -n
echo -e "\n\n~~ kitty_ipsum_2.txt info ~~" >> kitty_info.txt
echo -e "\nNumber of lines:" >> kitty_info.txt
cat kitty_info.txt
cat kitty_ipsum_2.txt
echo -e "\nNumber of words:" >> kitty_info.txt
cat kitty_ipsum_2.txt
wc -w < kitty_ipsum_2.txt
wc -w < kitty_ipsum_2.txt >> kitty_info.txt
echo -e "\nNumber of characters:" >> kitty_info.txt
wc -m < kitty_ipsum_2.txt >> kitty_info.txt
grep meow[a-z]* kitty_ipsum_2.txt --color
echo -e "\nNumber of times meow or meowzer appears:" >> kitty_info.txt
grep meow[a-z]* kitty_ipsum_2.txt -o
grep meow[a-z]* kitty_ipsum_2.txt -o
echo -e "\nLines that they appear on:" >> kitty_info.txt
grep meow[a-z]* kitty_ipsum_2.txt -n
grep cat[a-z]* kitty_ipsum_2.txt --color
echo -e "\nNumber of times cat, cats, or catnip appears:" >> kitty_info.txt
grep cat[a-z]* kitty_ipsum_2.txt -o
echo -e "\nLines that they appear on:" >> kitty_info.txt
grep cat[a-z]* kitty_ipsum_2.txt -n
touch translate.sh
chmod +x translate.sh
./translate.sh kitty_ipsum_1.txt
./translate.sh < kitty_ipsum_1.txt
cat kitty_ipsum_1.txt
cat kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_1.txt
./translate.sh kitty_ipsum_2.txt
